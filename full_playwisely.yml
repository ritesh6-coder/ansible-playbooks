---
- name: Rename or revert a VM in ESXi
  hosts: 192.168.223.131
  gather_facts: false
  vars:
    esxi_host: "{{ esxi_host }}"
    esxi_user: "{{ esxi_user }}"
    esxi_password: "{{ esxi_password }}"
    old_vm_name: "{{ old_vm_name }}"
    new_vm_name: "{{ new_vm_name }}"
    operation: "{{ operation | default('rename') }}"  # rename or revert
    take_snapshot: "{{ take_snapshot | default('false') }}"  # true or false

  tasks:
    - name: Find VM ID from old VM name
      shell: "vim-cmd vmsvc/getallvms | grep -w '{{ old_vm_name }}' | awk '{print $1}'"
      register: vmid_result

    - name: Fail if VM ID not found
      fail:
        msg: "VM with name {{ old_vm_name }} not found."
      when: vmid_result.stdout == ""

    - name: Set VM ID
      set_fact:
        vm_id: "{{ vmid_result.stdout }}"

    - name: Get VMX path for VM ID
      shell: "vim-cmd vmsvc/getallvms | grep -w '{{ old_vm_name }}' | awk '{print $3}'"
      register: vmx_path_result

    - name: Extract VMX directory
      set_fact:
        vmx_dir: "/vmfs/volumes/{{ vmx_path_result.stdout.split(']')[0] | regex_replace('\[|\]', '') }}/{{ vmx_path_result.stdout.split(']')[1] | regex_replace('^ ', '') | dirname }}"

    - name: Take snapshot (optional)
      shell: "vim-cmd vmsvc/snapshot.create {{ vm_id }} {{ old_vm_name }}-backup-$(date +%Y%m%d%H%M%S) auto snapshot"
      when: take_snapshot == 'true'

    - name: Power off VM
      shell: "vim-cmd vmsvc/power.off {{ vm_id }}"
      ignore_errors: true

    - name: Unregister the VM
      shell: "vim-cmd vmsvc/unregister {{ vm_id }}"

    - name: Rename VM files (VMDK, VMX, NVRAM, VMSD, etc.)
      shell: |
        for file in $(ls {{ vmx_dir }} | grep '{{ old_vm_name }}'); do
          newfile=$(echo $file | sed "s/{{ old_vm_name }}/{{ new_vm_name }}/g")
          mv {{ vmx_dir }}/$file {{ vmx_dir }}/$newfile
        done

    - name: Replace VM name in VMX config file
      replace:
        path: "{{ vmx_dir }}/{{ new_vm_name }}.vmx"
        regexp: '{{ old_vm_name }}'
        replace: '{{ new_vm_name }}'

    - name: Register renamed VM
      shell: "vim-cmd solo/registervm {{ vmx_dir }}/{{ new_vm_name }}.vmx"
      register: new_vmid

    - name: Power on renamed VM
      shell: "vim-cmd vmsvc/power.on {{ new_vmid.stdout }}"
      when: operation == 'rename'

    - name: Revert logic - restore files and re-register with original name
      block:
        - name: Power off current VM
          shell: "vim-cmd vmsvc/power.off {{ new_vmid.stdout }}"
          ignore_errors: true

        - name: Unregister renamed VM
          shell: "vim-cmd vmsvc/unregister {{ new_vmid.stdout }}"

        - name: Revert renamed files back to original
          shell: |
            for file in $(ls {{ vmx_dir }} | grep '{{ new_vm_name }}'); do
              origfile=$(echo $file | sed "s/{{ new_vm_name }}/{{ old_vm_name }}/g")
              mv {{ vmx_dir }}/$file {{ vmx_dir }}/$origfile
            done

        - name: Replace back VM name in VMX
          replace:
            path: "{{ vmx_dir }}/{{ old_vm_name }}.vmx"
            regexp: '{{ new_vm_name }}'
            replace: '{{ old_vm_name }}'

        - name: Register reverted VM
          shell: "vim-cmd solo/registervm {{ vmx_dir }}/{{ old_vm_name }}.vmx"
          register: reverted_vmid

        - name: Power on reverted VM
          shell: "vim-cmd vmsvc/power.on {{ reverted_vmid.stdout }}"
      when: operation == 'revert'

