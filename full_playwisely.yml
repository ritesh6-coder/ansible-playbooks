---
- name: Rename or revert an ESXi VM safely
  hosts: 192.168.223.131
  gather_facts: no
  vars:
    old_vm_name: "{{ lookup('vars', 'old_vm_name') }}"
    new_vm_name: "{{ lookup('vars', 'new_vm_name') }}"
    power_on: "{{ lookup('vars', 'power_on') | default('false') | bool }}"
    snapshot_before: "{{ lookup('vars', 'snapshot_before') | default('false') | bool }}"
    mode: "{{ lookup('vars', 'mode') | default('rename') }}"

  tasks:

    - name: Get all VMs
      shell: vim-cmd vmsvc/getallvms
      register: vmlist

    - name: Fail if VM list is empty or malformed
      fail:
        msg: "No VMs found on the host or output format invalid"
      when: vmlist.stdout_lines | length <= 1

    - name: Display current VM count
      debug:
        msg: "There are {{ vmlist.stdout_lines | length - 1 }} VMs on the host."

    - name: Extract line for old VM
      set_fact:
        old_vm_line: "{{ item }}"
      loop: "{{ vmlist.stdout_lines[1:] }}"
      when: "'{{ old_vm_name }}' in item"

    - name: Fail if old VM is not found
      fail:
        msg: "VM '{{ old_vm_name }}' not found."
      when: old_vm_line is not defined

    - name: Set old VM details
      set_fact:
        vmid: "{{ old_vm_line.split()[0] }}"
        current_vm_name: "{{ old_vm_line.split()[1] }}"
        datastore_path: "{{ old_vm_line.split()[2].split(']')[0] + ']' }}"
        target_vm_name: "{{ new_vm_name }}"

    - name: Take snapshot before rename (if enabled)
      shell: vim-cmd vmsvc/snapshot.create {{ vmid }} "pre-rename-snap" "Snapshot before renaming" 0 0
      when: snapshot_before

    - name: Power off VM before renaming/unregistering
      shell: vim-cmd vmsvc/power.off {{ vmid }}

    - name: Rename or revert VM files (folder, VMDK, VMX)
      shell: |
        SRC_DIR="/vmfs/volumes/{{ datastore_path | regex_replace('[\\[\\]]', '') }}/{{ current_vm_name }}"
        DST_DIR="/vmfs/volumes/{{ datastore_path | regex_replace('[\\[\\]]', '') }}/{{ target_vm_name }}"

        if [ ! -d "$SRC_DIR" ]; then
          echo "Source directory $SRC_DIR doesn't exist, assuming already renamed. Skipping."
          exit 0
        fi

        mv "$SRC_DIR" "$DST_DIR"

        for f in "$DST_DIR"/*{{ current_vm_name }}*; do
          mv "$f" "${f//${current_vm_name}/${target_vm_name}}"
        done

        sed -i "s/${current_vm_name}/${target_vm_name}/g" "$DST_DIR/${target_vm_name}.vmx"
      register: rename_result

    - name: Unregister original VM
      shell: vim-cmd vmsvc/unregister {{ vmid }}
      register: unregister_result
      failed_when: false

    - name: Re-register renamed VM
      shell: |
        VMX_PATH="[{{ datastore_path | regex_replace('[\\[\\]]', '') }}]/{{ target_vm_name }}/{{ target_vm_name }}.vmx"
        vim-cmd solo/registervm "$VMX_PATH"
      when: unregister_result is succeeded or 'Powered on' in unregister_result.stderr

    - name: Power on VM (if enabled)
      shell: vim-cmd vmsvc/power.on $(vim-cmd vmsvc/getallvms | grep "{{ target_vm_name }}" | awk '{print $1}')
      when: power_on

    - name: Final confirmation
      debug:
        msg: "Operation '{{ mode }}' completed successfully for VM '{{ target_vm_name }}'."

