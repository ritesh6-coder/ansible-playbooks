---
- name: Rename or revert an ESXi VM safely
  hosts: 192.168.223.131
  gather_facts: no
  vars:
    # These vars will be passed from AWX extra vars
    old_vm_name: "{{ old_vm_name }}"     # VM name to rename or revert
    new_vm_name: "{{ new_vm_name }}"     # New name to rename to (or revert from)
    power_on: "{{ power_on }}"            # true/false - Power on after rename
    snapshot_before: "{{ snapshot_before }}"  # true/false - Take snapshot before rename
    mode: "{{ mode }}"                    # 'rename' or 'revert'

  tasks:
    - name: List all VMs on ESXi host
      shell: vim-cmd vmsvc/getallvms
      register: vm_list

    - name: Fail if VM list is empty or malformed
      fail:
        msg: "Failed to retrieve VM list or list is empty."
      when: vm_list.stdout_lines | length <= 1

    - name: Display current VM count
      debug:
        msg: "There are {{ vm_list.stdout_lines | length - 1 }} VMs on the host."

    - name: Extract line for old VM
      set_fact:
        old_vm_line: "{{ item }}"
      loop: "{{ vm_list.stdout_lines[1:] }}"
      when: old_vm_name in item

    - name: Fail if old VM is not found
      fail:
        msg: "VM '{{ old_vm_name }}' not found."
      when: old_vm_line is not defined

    - name: Set old VM details
      set_fact:
        vmid: "{{ old_vm_line.split()[0] }}"
        current_vm_name: "{{ old_vm_line.split()[1] }}"
        datastore_path: "{{ old_vm_line.split()[2] }}"

    - name: Take snapshot before rename (if enabled)
      shell: vim-cmd vmsvc/snapshot.create {{ vmid }} pre_rename_snapshot "Snapshot before rename"
      when: snapshot_before | bool

    - name: Rename or revert VM files (folder, VMDK, VMX)
      shell: |
        VM_DIR="/vmfs/volumes/{{ datastore_path.split(']')[0].strip('[') }}/{{ current_vm_name }}"
        NEW_DIR="/vmfs/volumes/{{ datastore_path.split(']')[0].strip('[') }}/{{ new_vm_name }}"

        if [ "{{ mode }}" = "rename" ]; then
          mv "$VM_DIR" "$NEW_DIR"
          for f in "$NEW_DIR"/*{{ old_vm_name }}*; do
            mv "$f" "${f//'{{ old_vm_name }}'/'{{ new_vm_name }}'}"
          done
          sed -i 's/{{ old_vm_name }}/{{ new_vm_name }}/g' "$NEW_DIR/{{ new_vm_name }}.vmx"

        elif [ "{{ mode }}" = "revert" ]; then
          mv "$VM_DIR" "$NEW_DIR"
          for f in "$NEW_DIR"/*{{ new_vm_name }}*; do
            mv "$f" "${f//'{{ new_vm_name }}'/'{{ old_vm_name }}'}"
          done
          sed -i 's/{{ new_vm_name }}/{{ old_vm_name }}/g' "$NEW_DIR/{{ old_vm_name }}.vmx"
        fi

    - name: Unregister original VM
      shell: vim-cmd vmsvc/unregister {{ vmid }}

    - name: Register renamed or reverted VM
      shell: |
        vmx_path="{{ datastore_path | regex_replace(old_vm_name, new_vm_name) }}/{{ new_vm_name }}.vmx"
        full_path="/vmfs/volumes/{{ vmx_path }}"
        vim-cmd solo/registervm "$full_path"
      register: new_vmid_output

    - name: Extract new VMID
      set_fact:
        new_vmid: "{{ new_vmid_output.stdout.split()[-1] }}"

    - name: Power on the VM (if selected)
      shell: vim-cmd vmsvc/power.on {{ new_vmid }}
      when: power_on | bool

