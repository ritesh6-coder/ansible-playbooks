---
- name: Fully rename an ESXi VM (folder + internal files)
  hosts: 192.168.223.131
  gather_facts: no
  vars:
    old_vm_name: "{{ vm_current_name }}"
    new_vm_name: "{{ vm_target_name }}"
    datastore: "datastore1"
    datastore_path: "/vmfs/volumes/{{ datastore }}"
    old_path: "{{ datastore_path }}/{{ old_vm_name }}"
    new_path: "{{ datastore_path }}/{{ new_vm_name }}"

  tasks:

    - name: Get VM ID by filtering all VMs on ESXi by current VM name
      shell: "vim-cmd vmsvc/getallvms | grep '{{ old_vm_name }}' | awk '{print $1}'"
      register: vm_id_output
      failed_when: vm_id_output.stdout == ""
      changed_when: false

    - name: Set VM ID fact
      set_fact:
        vm_id: "{{ vm_id_output.stdout.strip() }}"

    - name: Take snapshot before renaming VM (if VM powered on)
      shell: |
        vm_power_state=$(vim-cmd vmsvc/power.getstate {{ vm_id }} | tail -1)
        if [[ "$vm_power_state" == "Powered on" ]]; then
          vim-cmd vmsvc/snapshot.create {{ vm_id }} "pre-rename-backup" "Snapshot before full rename from {{ old_vm_name }} to {{ new_vm_name }}" 0 0
        else
          echo "VM is powered off, skipping snapshot creation."
        fi
      register: snapshot_result
      failed_when: snapshot_result.rc != 0 and "'skipping snapshot' not in snapshot_result.stdout"
      changed_when: "'Snapshot' in snapshot_result.stdout"

    - name: Power off the VM if it's running
      shell: >
        if vim-cmd vmsvc/power.getstate {{ vm_id }} | grep -q "Powered on"; then
          vim-cmd vmsvc/power.off {{ vm_id }}
        fi

    - name: Unregister VM from ESXi inventory
      shell: vim-cmd vmsvc/unregister {{ vm_id }}

    - name: Rename VM folder on datastore
      shell: mv "{{ old_path }}" "{{ new_path }}"

    - name: Rename internal VM files (e.g., .vmx, .vmdk) to new VM name
      shell: |
        cd "{{ new_path }}"
        for file in $(ls); do
          newfile=$(echo "$file" | sed "s/{{ old_vm_name }}/{{ new_vm_name }}/g")
          mv "$file" "$newfile"
        done

    - name: Update VMX file contents with new VM name
      shell: |
        sed -i 's/displayName = \".*\"/displayName = \"{{ new_vm_name }}\"/' "{{ new_path }}/{{ new_vm_name }}.vmx"
        sed -i "s/{{ old_vm_name }}/{{ new_vm_name }}/g" "{{ new_path }}/{{ new_vm_name }}.vmx"

    - name: Update VMSD file if exists with new VM name
      shell: |
        if [ -f "{{ new_path }}/{{ new_vm_name }}.vmsd" ]; then
          sed -i "s/{{ old_vm_name }}/{{ new_vm_name }}/g" "{{ new_path }}/{{ new_vm_name }}.vmsd"
        fi
      ignore_errors: true

    - name: Register the renamed VM with ESXi inventory
      shell: vim-cmd solo/registervm "{{ new_path }}/{{ new_vm_name }}.vmx"

    - name: List all VMs to confirm rename
      shell: vim-cmd vmsvc/getallvms
      register: final_vm_list
      changed_when: false

    - name: Show VM list output for confirmation
      debug:
        msg: "{{ final_vm_list.stdout_lines }}"

