---
- name: Safe VM Rename Procedure
  hosts: 192.168.223.131
  gather_facts: false
  vars:
    datastore_name: "datastore1"  # CONFIRM THIS WITH YOUR ACTUAL DATASTORE NAME
    backup_root: "/vmfs/volumes/{{ datastore_name }}/vm_backups"

  tasks:
    # Phase 1: Validate VM existence
    - name: Get VM ID
      shell: |
        vim-cmd vmsvc/getallvms | grep '{{ old_vm_name }}' | awk '{print $1}' || true
      register: vm_id_result
      changed_when: false

    - name: Fail if VM not found
      fail:
        msg: "VM '{{ old_vm_name }}' does not exist"
      when: vm_id_result.stdout == ""

    # Phase 2: Power Management
    - name: Ensure VM is powered off
      block:
        - name: Get power state
          shell: |
            vim-cmd vmsvc/power.getstate {{ vm_id_result.stdout }} | grep -oE 'Powered (on|off)'
          register: power_state
          changed_when: false

        - name: Shutdown VM if running
          when: "'Powered on' in power_state.stdout"
          shell: |
            vim-cmd vmsvc/power.shutdown {{ vm_id_result.stdout }}
          register: shutdown_result
          ignore_errors: true

        - name: Wait for shutdown
          when: "'Powered on' in power_state.stdout"
          shell: |
            for i in {1..30}; do
              state=$(vim-cmd vmsvc/power.getstate {{ vm_id_result.stdout }} | grep -oE 'Powered (on|off)')
              [ "$state" = "Powered off" ] && exit 0
              sleep 2
            done
            exit 1
          args:
            executable: /bin/sh
          register: shutdown_wait
          retries: 5
          delay: 10
          until: shutdown_wait.rc == 0

      rescue:
        - name: Power management failed
          debug:
            msg: "Failed to power off VM after 5 attempts"
          # Separate meta task
        - meta: end_play

    # Phase 3: Safety Backup
    - name: Create backup directory
      shell: |
        mkdir -p "{{ backup_root }}/{{ old_vm_name }}_backup"
        chmod 755 "{{ backup_root }}/{{ old_vm_name }}_backup"
      args:
        executable: /bin/sh

    - name: Copy files to backup
      shell: |
        cp -rp "{{ vmx_dir }}" "{{ backup_root }}/{{ old_vm_name }}_backup/"
      args:
        executable: /bin/sh
      register: backup_result
      retries: 3
      delay: 5

    # Phase 4: Rename Operation
    - name: Perform rename
      block:
        - name: Create new directory
          file:
            path: "{{ vmx_dir | dirname }}/{{ new_vm_name }}"
            state: directory
            mode: '0755'

        - name: Copy and rename files
          shell: |
            find "{{ vmx_dir }}" -type f -exec sh -c '
              new_path="{{ vmx_dir | dirname }}/{{ new_vm_name }}/$(basename "$1" | sed "s/{{ old_vm_name }}/{{ new_vm_name }}/g")"
              cp -np "$1" "$new_path"
              chmod $(stat -c "%a" "$1") "$new_path"
            ' _ {} \;
          args:
            executable: /bin/sh

        - name: Update VMDK descriptors
          shell: |
            cd "{{ vmx_dir | dirname }}/{{ new_vm_name }}"
            for f in *.vmdk; do
              [ -f "$f" ] || continue
              [[ "$f" == *-flat.vmdk ]] && continue
              sed -i "s/{{ old_vm_name }}/{{ new_vm_name }}/g" "$f"
            done
          args:
            executable: /bin/sh

        - name: Update VMX file
          shell: |
            new_vmx="{{ vmx_dir | dirname }}/{{ new_vm_name }}/{{ new_vm_name }}.vmx"
            sed -i "s/{{ old_vm_name }}/{{ new_vm_name }}/g" "$new_vmx"
          args:
            executable: /bin/sh

      rescue:
        - name: Rename failed
          debug:
            msg: "Rename operation failed - backup available at {{ backup_root }}"
        - meta: end_play

    # Final Registration
    - name: Register new VM
      shell: |
        vim-cmd solo/registervm "{{ vmx_dir | dirname }}/{{ new_vm_name }}/{{ new_vm_name }}.vmx"
      register: register_result

    - name: Verify registration
      shell: |
        vim-cmd vmsvc/getallvms | grep '{{ new_vm_name }}'
      register: vm_check
      failed_when: vm_check.rc != 0

    - name: Success message
      debug:
        msg: |
          Successfully renamed VM to {{ new_vm_name }}
          New VM ID: {{ register_result.stdout }}
          Backup available at: {{ backup_root }}/{{ old_vm_name }}_backup
