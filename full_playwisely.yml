---
- name: Rename or revert an ESXi VM completely (files + config)
  hosts: 192.168.223.131
  gather_facts: no
  vars:
    datastore_path: "/vmfs/volumes"

  tasks:
    - name: Get VM ID if registered
      shell: "vim-cmd vmsvc/getallvms | grep '{{ old_vm_name }}' | awk '{print $1}'"
      register: vm_id_result
      changed_when: false

    - name: Set VM ID if available
      set_fact:
        vm_id: "{{ vm_id_result.stdout if vm_id_result.stdout != '' else None }}"

    - name: Unregister old VM if registered
      when: vm_id is defined and vm_id != ''
      shell: "vim-cmd vmsvc/unregister {{ vm_id }}"

    - name: Find full VMX path for old VM
      shell: "find {{ datastore_path }} -type f -name '{{ old_vm_name }}.vmx'"
      register: vmx_path_result
      changed_when: false

    - name: Set full VMX directory path
      set_fact:
        vmx_dir: "{{ vmx_path_result.stdout | dirname }}"

    - name: Take snapshot (optional)
      when: take_snapshot | default(false) | bool
      shell: "vim-cmd vmsvc/snapshot.create {{ vm_id }} auto-snapshot-{{ '%Y%m%d%H%M%S' | strftime }} auto snapshot"
      ignore_errors: yes

    - name: Rename VM folder and all internal files
      shell: |
        old_dir="{{ vmx_dir }}"
        new_dir="{{ vmx_dir | dirname }}/{{ new_vm_name }}"
        mv "$old_dir" "$new_dir"
        cd "$new_dir"
        for f in *{{ old_vm_name }}*; do
          newf=$(echo "$f" | sed "s/{{ old_vm_name }}/{{ new_vm_name }}/g")
          mv "$f" "$newf"
        done
      args:
        executable: /bin/bash

    - name: Update .vmx filename references
      shell: |
        vmx_file="{{ datastore_path }}/{{ new_vm_name }}/{{ new_vm_name }}.vmx"
        sed -i "s/{{ old_vm_name }}/{{ new_vm_name }}/g" "$vmx_file"

    - name: Register renamed VM
      shell: "vim-cmd solo/registervm {{ datastore_path }}/{{ new_vm_name }}/{{ new_vm_name }}.vmx"

    - name: Output final VM list
      shell: vim-cmd vmsvc/getallvms
      register: all_vms
      changed_when: false

    - debug:
        var: all_vms.stdout

