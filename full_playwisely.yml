---
- name: Rename or revert an ESXi VM safely
  hosts: all
  gather_facts: no
  vars:
    # AWX Extra Vars: Input from user
    old_vm_name: "{{ old_vm_name }}"  # VM name to rename or revert
    new_vm_name: "{{ new_vm_name }}"  # New name to rename to (or revert from)
    power_on: {{ power_on }}           # true/false - Power on after rename
    snapshot_before: {{ snapshot_before }}  # true/false - Snapshot before rename
    mode: "{{ mode }}"                 # 'rename' or 'revert'

  tasks:

    - name: List all VMs on ESXi host
      shell: vim-cmd vmsvc/getallvms
      register: vmlist

    - name: Count existing VMs on host
      set_fact:
        vm_count: "{{ vmlist.stdout_lines | length - 1 }}"

    - name: Display current VM count
      debug:
        msg: "There are {{ vm_count }} VMs on the host."

    - name: Fail if old and new names are identical
      fail:
        msg: "Old and new VM names are the same. Nothing to do."
      when: old_vm_name == new_vm_name

    - name: Prevent duplicate renaming if new name includes old name
      fail:
        msg: "New VM name '{{ new_vm_name }}' includes the old VM name '{{ old_vm_name }}'. Possible conflict."
      when: mode == 'rename' and new_vm_name in old_vm_name

    - name: Check for existing VM with new name
      shell: vim-cmd vmsvc/getallvms | grep -w "{{ new_vm_name }}"
      register: new_vm_exists
      ignore_errors: yes
      when: mode == 'rename'

    - name: Fail if VM with new name already exists
      fail:
        msg: "A VM named '{{ new_vm_name }}' already exists on the host."
      when: mode == 'rename' and new_vm_exists.rc == 0

    - name: Search for line containing old VM name
      set_fact:
        old_vm_line: >-
          {{ vmlist.stdout_lines[1:] | select("search", old_vm_name) | list | first | default("") }}

    - name: Fail if old VM is not found
      fail:
        msg: "VM '{{ old_vm_name }}' not found. Nothing to rename."
      when: old_vm_line == ""

    - name: Extract VM ID from line
      set_fact:
        old_vm_id: "{{ old_vm_line.split()[0] }}"

    - name: Extract datastore from line
      set_fact:
        datastore: >-
          {{ old_vm_line.split()[2].split(']')[0].strip('[') }}

    - name: Take snapshot before rename if enabled
      shell: vim-cmd vmsvc/snapshot.create {{ old_vm_id }} pre_rename_snapshot "Snapshot before rename" 0 0
      when: snapshot_before | bool and mode == 'rename'

    - name: Power off VM before rename
      shell: vim-cmd vmsvc/power.off {{ old_vm_id }}
      ignore_errors: true

    - name: Rename VM folder in datastore
      shell: >
        mv "/vmfs/volumes/{{ datastore }}/{{ old_vm_name }}" "/vmfs/volumes/{{ datastore }}/{{ new_vm_name }}"
      when: mode == 'rename'

    - name: Rename .vmx and .vmdk files
      shell: >
        for file in $(ls "/vmfs/volumes/{{ datastore }}/{{ new_vm_name }}/" | grep '{{ old_vm_name }}'); do
          mv "/vmfs/volumes/{{ datastore }}/{{ new_vm_name }}/$file" "/vmfs/volumes/{{ datastore }}/{{ new_vm_name }}/$file" | sed "s/{{ old_vm_name }}/{{ new_vm_name }}/g";
        done
      when: mode == 'rename'

    - name: Register renamed VM
      shell: >
        vim-cmd solo/registervm "/vmfs/volumes/{{ datastore }}/{{ new_vm_name }}/{{ new_vm_name }}.vmx" {{ new_vm_name }}
      when: mode == 'rename'

    - name: Take snapshot after revert if snapshot_before is false
      shell: vim-cmd vmsvc/snapshot.create {{ old_vm_id }} post_revert_snapshot "Snapshot after revert" 0 0
      when: snapshot_before | bool == false and mode == 'revert'

    - name: Power on VM if requested
      shell: vim-cmd vmsvc/power.on {{ old_vm_id }}
      when: power_on | bool

