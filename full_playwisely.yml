---
- name: Ultra-Safe VM Rename Procedure
  hosts: 192.168.223.131
  gather_facts: false
  vars:
    datastore_path: "/vmfs/volumes"
    safety_backup: true
    max_retries: 3

  tasks:
    # Phase 1: Pre-Flight Checks
    - name: Validate VM exists and get ID
      block:
        - name: Get VM ID
          shell: |
            vim-cmd vmsvc/getallvms | grep '{{ old_vm_name }}' | awk '{print $1}' || true
          register: vm_id_result
          changed_when: false

        - name: Verify VM exists
          fail:
            msg: "VM '{{ old_vm_name }}' not found in inventory"
          when: vm_id_result.stdout == ""

      rescue:
        - name: VM validation failed
          debug:
            msg: "VM validation failed - cannot proceed"
          # This must be a separate task
          
        - name: End play on validation failure
          meta: end_play

    # Phase 2: Power State Verification
    - name: Ensure VM is powered off
      block:
        - name: Get power state
          shell: |
            vim-cmd vmsvc/power.getstate {{ vm_id_result.stdout }} | grep -oE 'Powered (on|off)'
          register: power_state
          changed_when: false

        - name: Require powered off state
          fail:
            msg: "VM must be powered off before rename. Current state: {{ power_state.stdout }}"
          when: "'Powered on' in power_state.stdout"

      rescue:
        - name: Power state check failed
          debug:
            msg: "Power state verification failed"
          
        - name: End play on power state failure
          meta: end_play

    # Phase 3: Safety Backup
    - name: Create safety backup
      when: safety_backup | bool
      block:
        - name: Create backup directory
          file:
            path: "/vmfs/volumes/{{ datastore_path }}/vm_backups/{{ old_vm_name }}_backup"
            state: directory
            mode: '0755'

        - name: Copy all files to backup
          shell: |
            cp -rp "{{ vmx_dir }}" "/vmfs/volumes/{{ datastore_path }}/vm_backups/{{ old_vm_name }}_backup/"
          args:
            executable: /bin/sh
          register: backup_result
          retries: "{{ max_retries }}"
          delay: 10
          until: backup_result.rc == 0

      rescue:
        - name: Backup failed handler
          debug:
            msg: "Backup failed - aborting operation"
          
        - name: End play on backup failure
          meta: end_play

    # Phase 4: Rename Operation
    - name: Execute rename operation
      block:
        - name: Create new directory
          file:
            path: "{{ vmx_dir | dirname }}/{{ new_vm_name }}"
            state: directory
            mode: '0755'

        - name: Copy files with rename
          shell: |
            set -e
            old_dir="{{ vmx_dir }}"
            new_dir="{{ vmx_dir | dirname }}/{{ new_vm_name }}"
            for f in "$old_dir"/*; do
              [ -f "$f" ] || continue
              newname=$(basename "$f" | sed "s/{{ old_vm_name }}/{{ new_vm_name }}/g")
              cp -np "$f" "$new_dir/$newname"
            done
          args:
            executable: /bin/sh
          register: copy_result
          retries: "{{ max_retries }}"
          delay: 15

        - name: Update VMDK descriptors
          shell: |
            cd "{{ vmx_dir | dirname }}/{{ new_vm_name }}"
            for f in *.vmdk; do
              [ -f "$f" ] || continue
              [[ "$f" == *-flat.vmdk ]] && continue
              sed -i "s/{{ old_vm_name }}/{{ new_vm_name }}/g" "$f"
            done
          args:
            executable: /bin/sh

        - name: Update VMX file
          shell: |
            new_vmx="{{ vmx_dir | dirname }}/{{ new_vm_name }}/{{ new_vm_name }}.vmx"
            sed -i "s/{{ old_vm_name }}/{{ new_vm_name }}/g" "$new_vmx"
          args:
            executable: /bin/sh

      rescue:
        - name: Rename operation failed
          debug:
            msg: "Rename failed - original files remain intact in {{ vmx_dir }}"
          
        - name: End play on rename failure
          meta: end_play

    # Phase 5: Registration
    - name: Register renamed VM
      block:
        - name: Register VM
          shell: |
            vim-cmd solo/registervm "{{ vmx_dir | dirname }}/{{ new_vm_name }}/{{ new_vm_name }}.vmx"
          register: register_result

        - name: Verify registration
          shell: |
            vim-cmd vmsvc/getallvms | grep '{{ new_vm_name }}'
          register: vm_check
          failed_when: vm_check.rc != 0

      rescue:
        - name: Registration failed
          debug:
            msg: "Registration failed - you can manually register from backup"
          
        - name: End play on registration failure
          meta: end_play

    # Completion
    - name: Show success message
      debug:
        msg: |
          RENAME SUCCESSFUL!
          New VM: {{ new_vm_name }}
          VM ID: {{ register_result.stdout }}
          Backup kept at: /vmfs/volumes/{{ datastore_path }}/vm_backups/{{ old_vm_name }}_backup/
