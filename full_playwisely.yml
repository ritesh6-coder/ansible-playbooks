---
- name: Safely rename ESXi VMs with disk integrity checks
  hosts: 192.168.223.131
  gather_facts: false
  vars:
    datastore_path: "/vmfs/volumes"
    timeout_seconds: 300
    retry_delay: 5

  tasks:
    # Validate input variables
    - name: Validate required parameters
      assert:
        that:
          - old_vm_name is defined and old_vm_name != ""
          - new_vm_name is defined and new_vm_name != ""
          - operation in ['rename', 'revert']
        msg: "Must specify valid old_vm_name, new_vm_name, and operation"

    # Get VM ID if registered
    - name: Check if VM is registered
      shell: |
        vim-cmd vmsvc/getallvms | grep '{{ old_vm_name }}' | awk '{print $1}' || true
      register: vm_id_result
      changed_when: false
      failed_when: false

    # Set VM ID fact
    - name: Set VM ID
      set_fact:
        vm_id: "{{ vm_id_result.stdout }}"
      when: vm_id_result.stdout != ""

    # Pre-rename validation
    - name: Validate VM files exist
      block:
        - name: Find VMX file
          shell: |
            find {{ datastore_path }} -type f -name '{{ old_vm_name }}.vmx'
          register: vmx_path_result
          changed_when: false

        - name: Verify VMX found
          fail:
            msg: "No VMX file found for {{ old_vm_name }}"
          when: vmx_path_result.stdout == ""

        - name: Set VM directory
          set_fact:
            vmx_dir: "{{ vmx_path_result.stdout | dirname }}"
            vmx_file: "{{ vmx_path_result.stdout }}"

        - name: Check disk space
          shell: |
            df -h "{{ vmx_dir }}" | awk 'NR==2 {print $4}'
          register: disk_space
          changed_when: false

      rescue:
        - name: Cleanup on validation failure
          debug:
            msg: "Validation failed - check VM files manually"
          meta: end_play

    # Power off VM if registered
    - name: Ensure VM is powered off
      when: vm_id is defined
      block:
        - name: Get power state
          shell: |
            vim-cmd vmsvc/power.getstate {{ vm_id }} | grep -oE 'Powered (on|off)'
          register: power_state
          changed_when: false

        - name: Power off VM if running
          when: "'Powered on' in power_state.stdout"
          shell: |
            vim-cmd vmsvc/power.shutdown {{ vm_id }}
          register: power_off
          ignore_errors: true

        - name: Wait for shutdown
          when: "'Powered on' in power_state.stdout"
          shell: |
            for i in {1..30}; do
              state=$(vim-cmd vmsvc/power.getstate {{ vm_id }} | grep -oE 'Powered (on|off)')
              [ "$state" = "Powered off" ] && exit 0
              sleep 2
            done
            exit 1
          args:
            executable: /bin/sh
          register: shutdown_wait
          until: shutdown_wait.rc == 0
          retries: 5
          delay: 10
          ignore_errors: true

        - name: Fail if still powered on
          fail:
            msg: "Could not power off VM {{ vm_id }}"
          when: "'Powered on' in power_state.stdout" and shutdown_wait.rc != 0

      rescue:
        - name: Power state failure
          debug:
            msg: "Failed to power off VM - manual intervention required"
          meta: end_play

    # Take snapshot (if enabled)
    - name: Create pre-rename snapshot
      when: 
        - take_snapshot | default(false) | bool
        - vm_id is defined
      shell: |
        vim-cmd vmsvc/snapshot.create {{ vm_id }} "pre-rename-{{ '%Y%m%d-%H%M%S' | strftime }}" "Snapshot before rename"
      register: snapshot_result
      ignore_errors: true

    # Unregister VM if registered
    - name: Unregister VM
      when: vm_id is defined
      shell: |
        vim-cmd vmsvc/unregister {{ vm_id }}
      register: unregister_result
      ignore_errors: true

    # Rename operation
    - name: Perform rename
      when: operation == 'rename'
      block:
        - name: Create new directory
          file:
            path: "{{ vmx_dir | dirname }}/{{ new_vm_name }}"
            state: directory
            mode: '0755'

        - name: Copy all files with rename
          shell: |
            old_dir="{{ vmx_dir }}"
            new_dir="{{ vmx_dir | dirname }}/{{ new_vm_name }}"
            find "$old_dir" -type f -exec sh -c '
              new_path="$2/$(basename "$1" | sed "s/{{ old_vm_name }}/{{ new_vm_name }}/g")"
              [ -f "$1" ] && cp -np "$1" "$new_path" && chmod $(stat -c "%a" "$1") "$new_path"
            ' _ {} "$new_dir" \;
          args:
            executable: /bin/sh
          register: copy_result
          changed_when: copy_result.stdout != ""
          ignore_errors: true

        - name: Verify files copied
          fail:
            msg: "Failed to copy files to new directory"
          when: copy_result.rc != 0

        - name: Update VMDK descriptors
          shell: |
            cd "{{ vmx_dir | dirname }}/{{ new_vm_name }}"
            for f in *.vmdk; do
              [ -f "$f" ] || continue
              [[ "$f" == *-flat.vmdk ]] && continue
              [[ "$f" == *-sesparse.vmdk ]] && continue
              sed -i "s/{{ old_vm_name }}/{{ new_vm_name }}/g" "$f"
            done
          args:
            executable: /bin/sh
          register: update_vmdk
          failed_when: update_vmdk.rc != 0

        - name: Update VMX file
          shell: |
            new_vmx="{{ vmx_dir | dirname }}/{{ new_vm_name }}/{{ new_vm_name }}.vmx"
            sed -i "s/{{ old_vm_name }}/{{ new_vm_name }}/g" "$new_vmx"
            sed -i "s|/$(basename {{ vmx_dir }})/|/{{ new_vm_name }}/|g" "$new_vmx"
          args:
            executable: /bin/sh

      rescue:
        - name: Rename failure handler
          debug:
            msg: "Rename failed - check disk files manually"
          meta: end_play

    # Register renamed VM
    - name: Register VM
      shell: |
        vim-cmd solo/registervm "{{ datastore_path }}/{{ new_vm_name }}/{{ new_vm_name }}.vmx"
      register: register_result
      changed_when: register_result.rc == 0
      failed_when: register_result.rc != 0

    # Post-rename verification
    - name: Verify VM registration
      shell: |
        vim-cmd vmsvc/getallvms | grep '{{ new_vm_name }}'
      register: vm_check
      failed_when: vm_check.rc != 0

    - name: Show results
      debug:
        msg: |
          Operation: {{ operation }}
          Old VM: {{ old_vm_name }}
          New VM: {{ new_vm_name }}
          VM ID: {{ register_result.stdout }}
          Files: {{ (vmx_dir | dirname) }}/{{ new_vm_name }}/
          Status: SUCCESS
