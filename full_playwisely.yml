---
- name: Rename ESXi VM with pre-checks and snapshot backup
  hosts: esxi
  gather_facts: no
  vars:
    old_vm_name: "{{ vm_name }}"   # Pass this variable from AWX extra vars
    new_vm_name: "{{ vm_name }}-renamed"
    datastore_path: "/vmfs/volumes/datastore1"
  tasks:

    - name: Confirm SSH login success
      shell: echo "Login successful to ESXi host {{ inventory_hostname }}"
      register: login_message

    - name: Show login success message
      debug:
        msg: "{{ login_message.stdout }}"

    - name: Get all VMs list
      shell: vim-cmd vmsvc/getallvms
      register: all_vms_raw
      changed_when: false

    - name: Count total VMs on host
      set_fact:
        total_vms: "{{ all_vms_raw.stdout_lines | length - 1 }}"  # subtract header line

    - name: Show total VM count
      debug:
        msg: "Total VMs found on ESXi host: {{ total_vms }}"

    - name: Get VM details matching old_vm_name
      shell: vim-cmd vmsvc/getallvms | grep "{{ old_vm_name }}"
      register: vm_match
      failed_when: vm_match.rc != 0

    - name: Show matched VM details
      debug:
        msg: "{{ vm_match.stdout }}"

    - name: Extract VM ID from matched VM
      set_fact:
        vm_id: "{{ vm_match.stdout.split()[0] }}"

    - name: Take snapshot of VM before rename
      shell: vim-cmd vmsvc/snapshot.create {{ vm_id }} "pre-rename-backup" "Snapshot before VM rename" 0 0
      register: snapshot_result

    - name: Show snapshot creation result
      debug:
        msg: "{{ snapshot_result.stdout }}"

    - name: Power off the VM if powered on
      shell: |
        if vim-cmd vmsvc/power.getstate {{ vm_id }} | grep -q "Powered on"; then
          vim-cmd vmsvc/power.off {{ vm_id }}
        else
          echo "VM already powered off"
        fi
      register: poweroff_result

    - name: Show power off result
      debug:
        msg: "{{ poweroff_result.stdout }}"

    - name: Rename VM folder on datastore
      shell: mv "{{ datastore_path }}/{{ old_vm_name }}" "{{ datastore_path }}/{{ new_vm_name }}"
      register: mv_folder_result
      failed_when: mv_folder_result.rc != 0 and "No such file or directory" not in mv_folder_result.stderr

    - name: Show rename folder result
      debug:
        msg: "{{ mv_folder_result.stderr if mv_folder_result.rc != 0 else 'Folder renamed successfully' }}"

    - name: Rename VM inside ESXi
      shell: vim-cmd vmsvc/rename {{ vm_id }} "{{ new_vm_name }}"
      register: rename_vm_result

    - name: Show rename VM result
      debug:
        msg: "{{ rename_vm_result.stdout }}"

    - name: List all VMs after rename
      shell: vim-cmd vmsvc/getallvms
      register: vms_list

    - name: Show current VMs on ESXi host
      debug:
        msg: "{{ vms_list.stdout_lines }}"

