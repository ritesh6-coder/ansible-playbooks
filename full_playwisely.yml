---
- name: Rename or revert an ESXi VM safely
  hosts: 192.168.223.131
  gather_facts: false
  become: yes
  vars:
    power_on: true  # set to true to power on the VM after renaming
  tasks:

    - name: List all VMs on ESXi host
      shell: vim-cmd vmsvc/getallvms
      register: getallvms_output

    - name: Count existing VMs on host
      set_fact:
        vm_count: "{{ getallvms_output.stdout_lines | length - 1 }}"

    - name: Display current VM count
      debug:
        msg: "There are {{ vm_count }} VMs on the host."

    - name: Fail if old and new names are identical
      fail:
        msg: "Old and new VM names are identical ({{ old_vm_name }}); nothing to do."
      when: old_vm_name == new_vm_name

    - name: Prevent duplicate renaming if new name includes old name
      fail:
        msg: "The new VM name '{{ new_vm_name }}' includes the old name '{{ old_vm_name }}'. Avoid double-suffixing."
      when: new_vm_name.endswith(old_vm_name)

    - name: Check for existing VM with new name
      fail:
        msg: "A VM with the name '{{ new_vm_name }}' already exists on the host. Aborting rename."
      when: (" " + new_vm_name + " ") in getallvms_output.stdout

    - name: Find the VM ID of the old VM
      set_fact:
        old_vm_id: >-
          {{ getallvms_output.stdout_lines
             | select('match','^\\s*\\d+\\s+' + old_vm_name + '\\s')
             | map('regex_replace','^\\s*(\\d+).*','\\1')
             | list | first }}
      failed_when: false

    - name: Fail if old VM is not found
      fail:
        msg: "VM '{{ old_vm_name }}' not found. Nothing to rename."
      when: old_vm_id is not defined or old_vm_id == ""

    - name: Check power state of old VM
      shell: vim-cmd vmsvc/power.getstate {{ old_vm_id }}
      register: power_state

    - name: Power off the VM if running
      shell: vim-cmd vmsvc/power.off {{ old_vm_id }}
      when: "'Powered on' in power_state.stdout"

    - name: Unregister the old VM
      shell: vim-cmd vmsvc/unregister {{ old_vm_id }}

    - name: Check if old VM folder exists
      stat:
        path: /vmfs/volumes/datastore1/{{ old_vm_name }}
      register: old_folder

    - name: Check if new VM folder exists
      stat:
        path: /vmfs/volumes/datastore1/{{ new_vm_name }}
      register: new_folder

    - name: Fail if target VM folder already exists
      fail:
        msg: "Target VM folder '{{ new_vm_name }}' already exists."
      when: new_folder.stat.exists

    - name: Rename the VM folder on datastore
      shell: mv /vmfs/volumes/datastore1/{{ old_vm_name }} /vmfs/volumes/datastore1/{{ new_vm_name }}
      when: old_folder.stat.exists and not new_folder.stat.exists

    - name: Rename all files inside folder
      shell: |
        cd /vmfs/volumes/datastore1/{{ new_vm_name }}
        for f in *; do
          newf=$(echo "$f" | sed "s/{{ old_vm_name }}/{{ new_vm_name }}/g")
          if [ "$f" != "$newf" ]; then mv "$f" "$newf"; fi
        done
      args:
        executable: /bin/bash
      when: old_folder.stat.exists and not new_folder.stat.exists

    - name: Update VMX file references
      replace:
        path: /vmfs/volumes/datastore1/{{ new_vm_name }}/{{ new_vm_name }}.vmx
        regexp: "{{ old_vm_name }}"
        replace: "{{ new_vm_name }}"
      when: old_folder.stat.exists and not new_folder.stat.exists

    - name: Check for VMSD file
      stat:
        path: /vmfs/volumes/datastore1/{{ new_vm_name }}/{{ new_vm_name }}.vmsd
      register: vmsd_file

    - name: Replace old name in VMSD file
      replace:
        path: /vmfs/volumes/datastore1/{{ new_vm_name }}/{{ new_vm_name }}.vmsd
        regexp: "{{ old_vm_name }}"
        replace: "{{ new_vm_name }}"
      when: vmsd_file.stat.exists

    - name: Register the new VM
      shell: vim-cmd solo/registervm /vmfs/volumes/datastore1/{{ new_vm_name }}/{{ new_vm_name }}.vmx
      register: register_vm_output
      changed_when: true

    - name: Get new VM ID
      shell: vim-cmd vmsvc/getallvms | grep -w "{{ new_vm_name }}" | awk '{print $1}'
      register: new_vm_id_search

    - name: Set fact for new VM ID
      set_fact:
        new_vm_id: "{{ new_vm_id_search.stdout | trim }}"

    - name: Fail if new VM registration failed
      fail:
        msg: "Failed to register VM '{{ new_vm_name }}'."
      when: new_vm_id == ""

    - name: Take snapshot after rename
      shell: >
        vim-cmd vmsvc/snapshot.create {{ new_vm_id }}
        "{{ new_vm_name }}_snapshot"
        "Snapshot taken after VM rename" 0 0

    - name: Power on the VM if required
      shell: vim-cmd vmsvc/power.on {{ new_vm_id }}
      when: power_on | bool

    - name: Final list of all VMs
      shell: vim-cmd vmsvc/getallvms
      register: final_vms

    - name: Show final VM list
      debug:
        msg: "{{ final_vms.stdout }}"

