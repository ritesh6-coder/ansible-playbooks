---
- name: Rename or revert an ESXi VM folder and files with full rename
  hosts: 192.168.223.131
  gather_facts: no

  vars:
    # Pass current VM folder name (what it is currently named)
    current_vm_name: "{{ vm_current_name }}"
    # Pass target VM folder name (what you want it renamed to)
    target_vm_name: "{{ vm_target_name }}"
    datastore: "datastore1"
    datastore_path: "/vmfs/volumes/{{ datastore }}"
    current_path: "{{ datastore_path }}/{{ current_vm_name }}"
    target_path: "{{ datastore_path }}/{{ target_vm_name }}"

  tasks:
    - name: Get VM ID by filtering all VMs on ESXi
      shell: "vim-cmd vmsvc/getallvms | grep '{{ current_vm_name }}' | awk '{print $1}'"
      register: vm_id_output
      failed_when: vm_id_output.stdout == ""
      changed_when: false

    - name: Set VM ID as fact
      set_fact:
        vm_id: "{{ vm_id_output.stdout.strip() }}"

    - name: Debug VM ID for verification
      debug:
        msg: "VM ID for VM '{{ current_vm_name }}' is {{ vm_id }}"

    - name: Create snapshot before renaming
      shell: >
        vim-cmd vmsvc/snapshot.create {{ vm_id }}
        "pre-rename-backup" "Snapshot before rename from {{ current_vm_name }} to {{ target_vm_name }}" 0 0
      register: snapshot_result

    - name: Power off VM if powered on
      shell: |
        if vim-cmd vmsvc/power.getstate {{ vm_id }} | grep -q "Powered on"; then
          vim-cmd vmsvc/power.off {{ vm_id }}
          echo "VM powered off."
        else
          echo "VM already powered off."
        fi
      register: poweroff_result

    - name: Unregister VM
      shell: vim-cmd vmsvc/unregister {{ vm_id }}
      register: unregister_result

    - name: Rename VM folder
      shell: mv "{{ current_path }}" "{{ target_path }}"
      register: rename_folder_result

    - name: Rename files inside the VM folder to replace current name with target name
      shell: |
        cd "{{ target_path }}"
        for file in $(ls); do
          newfile=$(echo "$file" | sed "s/{{ current_vm_name }}/{{ target_vm_name }}/g")
          mv "$file" "$newfile"
        done
      register: rename_files_result

    - name: Update .vmx file displayName and references
      shell: |
        sed -i 's/displayName = \".*\"/displayName = \"{{ target_vm_name }}\"/' "{{ target_path }}/{{ target_vm_name }}.vmx"
        sed -i "s/{{ current_vm_name }}/{{ target_vm_name }}/g" "{{ target_path }}/{{ target_vm_name }}.vmx"
      register: vmx_update_result

    - name: Update .vmsd file if exists
      shell: |
        if [ -f "{{ target_path }}/{{ target_vm_name }}.vmsd" ]; then
          sed -i "s/{{ current_vm_name }}/{{ target_vm_name }}/g" "{{ target_path }}/{{ target_vm_name }}.vmsd"
          echo ".vmsd file updated."
        else
          echo ".vmsd file not found, skipping."
        fi
      register: vmsd_update_result
      ignore_errors: true

    - name: Register VM with new name
      shell: vim-cmd solo/registervm "{{ target_path }}/{{ target_vm_name }}.vmx"
      register: register_result

    - name: List all registered VMs after rename
      shell: vim-cmd vmsvc/getallvms
      register: vms_list
      changed_when: false

    - name: Show VM list for verification
      debug:
        msg: "{{ vms_list.stdout_lines }}"

