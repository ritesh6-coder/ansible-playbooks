---
- name: Safe VM Rename Procedure with Auto Power Management
  hosts: 192.168.223.131
  gather_facts: false
  vars:
    datastore_name: "datastore1"  # CONFIGURE THIS TO YOUR DATASTORE
    backup_root: "/vmfs/volumes/{{ datastore_name }}/vm_backups"
    max_retries: 5
    retry_delay: 10

  tasks:
    # Phase 1: Validate and Get VM Info
    - name: Validate VM exists
      block:
        - name: Get VM ID
          shell: |
            vim-cmd vmsvc/getallvms | grep '{{ old_vm_name }}' | awk '{print $1}' || true
          register: vm_id_result
          changed_when: false

        - name: Fail if VM not found
          fail:
            msg: "VM '{{ old_vm_name }}' not found"
          when: vm_id_result.stdout == ""

        - name: Set VM ID fact
          set_fact:
            vm_id: "{{ vm_id_result.stdout }}"

      rescue:
        - name: VM validation failed
          debug:
            msg: "VM validation failed - check VM name"
          meta: end_play

    # Phase 2: Power Management
    - name: Ensure VM is powered off
      block:
        - name: Get current power state
          shell: |
            vim-cmd vmsvc/power.getstate {{ vm_id }} | grep -oE 'Powered (on|off)'
          register: power_state
          changed_when: false

        - name: Shutdown if powered on
          when: "'Powered on' in power_state.stdout"
          shell: |
            vim-cmd vmsvc/power.shutdown {{ vm_id }}
          register: shutdown_cmd
          ignore_errors: true

        - name: Wait for shutdown
          when: "'Powered on' in power_state.stdout"
          shell: |
            for i in {1..30}; do
              state=$(vim-cmd vmsvc/power.getstate {{ vm_id }} | grep -oE 'Powered (on|off)')
              [ "$state" = "Powered off" ] && exit 0
              sleep 2
            done
            exit 1
          args:
            executable: /bin/sh
          register: shutdown_wait
          retries: "{{ max_retries }}"
          delay: "{{ retry_delay }}"
          until: shutdown_wait.rc == 0

        - name: Final power state check
          fail:
            msg: "Failed to power off VM after {{ max_retries * retry_delay }} seconds"
          when: shutdown_wait is defined and shutdown_wait.rc != 0

      rescue:
        - name: Power management failed
          debug:
            msg: "Power off procedure failed - manual intervention required"
          meta: end_play

    # Phase 3: Safety Backup
    - name: Create backup
      block:
        - name: Create backup directory
          shell: |
            mkdir -p "{{ backup_root }}/{{ old_vm_name }}_backup"
            chmod 755 "{{ backup_root }}/{{ old_vm_name }}_backup"
          args:
            executable: /bin/sh

        - name: Copy VM files to backup
          shell: |
            cp -rp "{{ vmx_dir }}/." "{{ backup_root }}/{{ old_vm_name }}_backup/"
          args:
            executable: /bin/sh
          register: backup_result
          retries: 3
          delay: 5

      rescue:
        - name: Backup failed
          debug:
            msg: "Backup failed - original files preserved"
          meta: end_play

    # Phase 4: Rename Operation
    - name: Perform rename
      block:
        - name: Create new directory
          shell: |
            mkdir -p "{{ vmx_dir | dirname }}/{{ new_vm_name }}"
            chmod 755 "{{ vmx_dir | dirname }}/{{ new_vm_name }}"
          args:
            executable: /bin/sh

        - name: Copy and rename files
          shell: |
            find "{{ vmx_dir }}" -type f -exec sh -c '
              new_path="{{ vmx_dir | dirname }}/{{ new_vm_name }}/$(basename "$1" | sed "s/{{ old_vm_name }}/{{ new_vm_name }}/g")"
              cp -np "$1" "$new_path"
              chmod $(stat -c "%a" "$1") "$new_path"
            ' _ {} \;
          args:
            executable: /bin/sh
          register: copy_result
          retries: 3
          delay: 5

        - name: Update VMDK descriptors
          shell: |
            cd "{{ vmx_dir | dirname }}/{{ new_vm_name }}"
            for f in *.vmdk; do
              [ -f "$f" ] || continue
              [[ "$f" == *-flat.vmdk ]] && continue
              sed -i "s/{{ old_vm_name }}/{{ new_vm_name }}/g" "$f"
            done
          args:
            executable: /bin/sh

        - name: Update VMX file
          shell: |
            new_vmx="{{ vmx_dir | dirname }}/{{ new_vm_name }}/{{ new_vm_name }}.vmx"
            sed -i "s/{{ old_vm_name }}/{{ new_vm_name }}/g" "$new_vmx"
          args:
            executable: /bin/sh

      rescue:
        - name: Rename failed
          debug:
            msg: "Rename failed - backup available at {{ backup_root }}"
          meta: end_play

    # Phase 5: Registration and Verification
    - name: Register new VM
      block:
        - name: Register VM
          shell: |
            vim-cmd solo/registervm "{{ vmx_dir | dirname }}/{{ new_vm_name }}/{{ new_vm_name }}.vmx"
          register: register_result

        - name: Verify registration
          shell: |
            vim-cmd vmsvc/getallvms | grep '{{ new_vm_name }}'
          register: vm_check
          failed_when: vm_check.rc != 0

      rescue:
        - name: Registration failed
          debug:
            msg: "Registration failed - use backup to restore: {{ backup_root }}"
          meta: end_play

    # Final Success
    - name: Completion message
      debug:
        msg: |
          SUCCESS! VM renamed to {{ new_vm_name }}
          New VM ID: {{ register_result.stdout }}
          Backup Location: {{ backup_root }}/{{ old_vm_name }}_backup
