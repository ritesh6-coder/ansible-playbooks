---
- name: Rename or revert an ESXi VM with optional snapshot
  hosts: 192.168.223.131
  gather_facts: no
  vars:
    datastore_path: "/vmfs/volumes"
    vmx_dir: ""
    vmx_file: ""
    new_vmx_path: ""
    vm_id: ""
  tasks:

    - name: Find VM ID for old VM name
      shell: |
        vim-cmd vmsvc/getallvms | awk -v vm="{{ old_vm_name }}" '$0 ~ vm {print $1}'
      register: vmid_result
      changed_when: false

    - name: Set VM ID fact
      set_fact:
        vm_id: "{{ vmid_result.stdout }}"

    - name: Fail if VM ID not found
      fail:
        msg: "VM '{{ old_vm_name }}' not found on ESXi host."
      when: vm_id == ""

    - name: Get VMX file path
      shell: |
        vim-cmd vmsvc/getallvms | grep "{{ old_vm_name }}" | awk '{print $3}'
      register: vmx_result
      changed_when: false

    - name: Set VM paths
      set_fact:
        vmx_file: "{{ vmx_result.stdout }}"
        vmx_dir: "{{ datastore_path }}/{{ vmx_result.stdout | regex_replace('/[^/]+$', '') }}"
        new_vmx_path: "{{ datastore_path }}/{{ vmx_result.stdout | regex_replace('/[^/]+$', '') }}/{{ new_vm_name }}.vmx"

    - name: Take snapshot (optional)
      shell: vim-cmd vmsvc/snapshot.create {{ vm_id }} pre_rename_snapshot "Snapshot before rename"
      when: take_snapshot | bool
      register: snapshot_result

    - name: Power off VM
      shell: vim-cmd vmsvc/power.off {{ vm_id }}
      register: poweroff_result
      changed_when: "'Powered off' in poweroff_result.stdout"

    - name: Unregister old VM
      shell: vim-cmd vmsvc/unregister {{ vm_id }}

    - name: Rename VM files and folder
      shell: |
        old_dir="{{ vmx_dir }}"
        new_dir="{{ vmx_dir | dirname }}/{{ new_vm_name }}"
        mv "$old_dir" "$new_dir"
        cd "$new_dir"
        for f in *{{ old_vm_name }}*; do
          newf=$(echo "$f" | sed "s/{{ old_vm_name }}/{{ new_vm_name }}/g")
          mv "$f" "$newf"
        done
      args:
        executable: /bin/sh

    - name: Register renamed VM
      shell: vim-cmd solo/registervm {{ new_vmx_path }}
      register: register_result
      changed_when: "'successfully' in register_result.stdout or register_result.rc == 0"

    - name: Show final result
      debug:
        msg: "VM '{{ old_vm_name }}' renamed to '{{ new_vm_name }}'. Registered VM ID: {{ register_result.stdout }}"

