---
- name: Ultra-Safe VM Rename Procedure
  hosts: 192.168.223.131
  gather_facts: false
  vars:
    datastore_path: "/vmfs/volumes"
    safety_backup: true  # Set to false after testing
    max_retries: 3

  tasks:
    # Phase 1: Pre-Flight Checks
    - name: Validate VM is powered off
      block:
        - name: Get VM ID
          shell: |
            vim-cmd vmsvc/getallvms | grep '{{ old_vm_name }}' | awk '{print $1}' || true
          register: vm_id_result
          changed_when: false

        - name: Verify power state
          when: vm_id_result.stdout != ""
          shell: |
            vim-cmd vmsvc/power.getstate {{ vm_id_result.stdout }} | grep -oE 'Powered (on|off)'
          register: power_state
          failed_when: "'Powered on' in power_state.stdout"

      rescue:
        - name: Power state failure
          debug:
            msg: "VM MUST be powered off before rename. Current state: {{ power_state.stdout }}"
          meta: end_play

    # Phase 2: Safety Backup
    - name: Create safety backup
      when: safety_backup | bool
      block:
        - name: Create backup directory
          file:
            path: "/vmfs/volumes/{{ datastore_path }}/vm_backups/{{ old_vm_name }}_backup_{{ '%Y%m%d' | strftime }}"
            state: directory
            mode: '0755'

        - name: Copy all files to backup
          shell: |
            rsync -av "{{ vmx_dir }}/" "/vmfs/volumes/{{ datastore_path }}/vm_backups/{{ old_vm_name }}_backup_{{ '%Y%m%d' | strftime }}/"
          args:
            executable: /bin/sh
          register: backup_result
          retries: "{{ max_retries }}"
          delay: 10
          until: backup_result.rc == 0

      rescue:
        - name: Backup failed
          debug:
            msg: "BACKUP FAILED! Aborting operation to prevent data loss."
          meta: end_play

    # Phase 3: Rename Operation (With Recovery Checkpoint)
    - name: Execute rename with recovery point
      block:
        - name: Create new directory
          file:
            path: "{{ vmx_dir | dirname }}/{{ new_vm_name }}"
            state: directory
            mode: '0755'

        - name: Copy files (safe mode)
          shell: |
            set -e
            old_dir="{{ vmx_dir }}"
            new_dir="{{ vmx_dir | dirname }}/{{ new_vm_name }}"
            for f in "$old_dir"/*; do
              [ -f "$f" ] || continue
              filename=$(basename "$f")
              newname=$(echo "$filename" | sed "s/{{ old_vm_name }}/{{ new_vm_name }}/g")
              cp -np "$f" "$new_dir/$newname"
              chmod $(stat -c "%a" "$f") "$new_dir/$newname"
            done
          args:
            executable: /bin/sh
          register: copy_result
          retries: "{{ max_retries }}"
          delay: 15  # Wait for any locks to clear

        - name: Update configuration files
          block:
            - name: Update VMDK descriptors
              shell: |
                cd "{{ vmx_dir | dirname }}/{{ new_vm_name }}"
                for f in *.vmdk; do
                  [ -f "$f" ] || continue
                  [[ "$f" == *-flat.vmdk ]] && continue
                  sed -i "s/{{ old_vm_name }}/{{ new_vm_name }}/g" "$f"
                done
              args:
                executable: /bin/sh

            - name: Update VMX file
              shell: |
                new_vmx="{{ vmx_dir | dirname }}/{{ new_vm_name }}/{{ new_vm_name }}.vmx"
                sed -i "s/{{ old_vm_name }}/{{ new_vm_name }}/g" "$new_vmx"
              args:
                executable: /bin/sh

          rescue:
            - name: Config update failed
              debug:
                msg: "Configuration update failed - restoring from backup"
              meta: end_play

      rescue:
        - name: Rename operation failed
          debug:
            msg: "RENAME FAILED! Original files remain in {{ vmx_dir }}"
          meta: end_play

    # Phase 4: Post-Rename Verification
    - name: Validate new VM
      block:
        - name: Register VM
          shell: |
            vim-cmd solo/registervm "{{ vmx_dir | dirname }}/{{ new_vm_name }}/{{ new_vm_name }}.vmx"
          register: register_result

        - name: Verify registration
          shell: |
            vim-cmd vmsvc/getallvms | grep '{{ new_vm_name }}'
          register: vm_check
          failed_when: vm_check.rc != 0

      rescue:
        - name: Registration failed
          debug:
            msg: "VM registration failed. Backup available at /vmfs/volumes/{{ datastore_path }}/vm_backups/"
          meta: end_play

    # Final Success
    - name: Completion message
      debug:
        msg: |
          RENAME SUCCESSFUL!
          Old VM: {{ old_vm_name }} (retained as backup)
          New VM: {{ new_vm_name }}
          VM ID: {{ register_result.stdout }}
          Backup Location: /vmfs/volumes/{{ datastore_path }}/vm_backups/{{ old_vm_name }}_backup_{{ '%Y%m%d' | strftime }}/
